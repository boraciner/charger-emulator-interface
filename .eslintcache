[{"C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\App.js":"1","C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\components\\DeviceState\\DeviceState.js":"2","C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\index.js":"3","C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\components\\Header\\Header.js":"4","C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\reportWebVitals.js":"5"},{"size":3790,"mtime":1608981099893,"results":"6","hashOfConfig":"7"},{"size":12260,"mtime":1608986849762,"results":"8","hashOfConfig":"7"},{"size":517,"mtime":1608715935580,"results":"9","hashOfConfig":"7"},{"size":887,"mtime":1608982415547,"results":"10","hashOfConfig":"7"},{"size":375,"mtime":1608715935581,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"md415a",{"filePath":"14","messages":"15","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\App.js",[],"C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\components\\DeviceState\\DeviceState.js",["24","25","26","27","28","29","30","31"],"import React,{Component, useState} from 'react'\r\nimport { createMuiTheme, responsiveFontSizes} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './DeviceState.css'\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nclass DeviceState extends Component{\r\n\r\n    pevSendStartCommand(){\r\n        console.log(\"Send Start Command\")\r\n        const data = new Uint8Array([32]); // space\r\n            this.portWriter.write(data).then(res=>{\r\n            });\r\n    }\r\n    handleContToggleSwitch(event){\r\n\r\n    }\r\n\r\n    pevSendStopCommand(){\r\n        const data = new Uint8Array([100]); // d\r\n        this.portWriter.write(data).then(res=>{\r\n        });\r\n\r\n        this.initializePEVStrings();\r\n        this.setState({  \r\n            printOutCom : this.printOutCom,\r\n            toggleToRefresh : true,\r\n            role : this.role,\r\n            checked : this.state.checked  \r\n        })\r\n    }\r\n    initializePEVStrings(){\r\n        this.pevStrings = [\r\n            {details : \"PIB image reading completed OK\",display : \"PIB image reading completed OK\",found : false,warning : false},\r\n            {details : \"CM_SLAC_PARAM.REQ sent\",display : \"CM_SLAC_PARAM.REQ sent\",found : false,warning : false},\r\n            {details : \"CM_SLAC_PARAM.CNF received\",display : \"CM_SLAC_PARAM.CNF received\",found : false,warning : false},\r\n            {details : \"CM_START_ATTEN_CHAR.IND sent\",display : \"CM_START_ATTEN_CHAR.IND sent\",found : false,warning : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",display : \"CM_MNBC_SOUND.IND sent\",found : false,warning : false},\r\n            {details : \"CM_ATTEN_CHAR.IND received\",display : \"CM_ATTEN_CHAR.IND received\",found : false,warning : false},\r\n            {details : \"CM_ATTEN_CHAR.RSP sent\",display : \"CM_ATTEN_CHAR.RSP sent\",found : false,warning : false},\r\n            {details : \"CM_VALIDATE.REQ sent\",display : \"CM_VALIDATE.REQ sent\",found : false,warning : false},\r\n            {details : \"CM_VALIDATE.CNF received. -Charger Ready-\",display : \"CM_VALIDATE.CNF received. -Charger Ready-\",found : false,warning : false},\t\r\n            {details : \"CM_VALIDATE.CNF received. -Charger Success-\",display : \"CM_VALIDATE.CNF received. -Charger Success-\",found : false,warning : false},\t\r\n            {details : \"CM_SET_KEY.CNF received\",display : \"CM_SET_KEY.CNF received\",found : false,warning : false},\t\r\n            {details : \"New keys set\",display : \"New keys set\",found : false,warning : false},\t\r\n            {details : \"Link Measurement:\",display : \"Link Measurement:\",found : false,warning : false},\t\r\n            {details : \"Sending IPv6.\",display : \"Sending IPv6.\",found : false,warning : false},\t\r\n            {details : \"IPv6 Message is received\",display : \"IPv6 Message is received\",found : false,warning : false},\t\r\n            {details : \"TIMEOUT\",display : \"Timeout Occured\",found : false,warning : true},\t\r\n        ]\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    componentDidMount(){\r\n        this.OpenReadComPort();\r\n    }\r\n\r\n    ProcessSplittedCommand(sCommand){\r\n        console.warn(\"sCommand \",sCommand)\r\n        if(sCommand.length > 5){\r\n            if(sCommand.includes(\"ROLE:PEV\"))\r\n            {\r\n                    this.role = \"PEV\";\r\n                    clearInterval(this.queryInterval);\r\n                    this.setState({  printOutCom : this.printOutCom,\r\n                                        toggleToRefresh : this.toggleToRefresh,\r\n                                        role : this.role  ,\r\n                                        checked : this.state.checked  \r\n                                    })\r\n            }\r\n            else if(sCommand.includes(\"ROLE:EVSE\"))\r\n            {\r\n                    this.role = \"EVSE\";\r\n                    clearInterval(this.queryInterval);\r\n                    this.setState({  printOutCom : this.printOutCom,\r\n                                        toggleToRefresh : this.toggleToRefresh,\r\n                                        role : this.role ,\r\n                                        checked : this.state.checked   })\r\n            }else{\r\n                    let nowFound = false;\r\n                    for(let i=0;i<this.pevStrings.length;i++){\r\n                        //console.log(\"Compare \",sCommand, \" with \",this.pevStrings[i].details)\r\n                        if(sCommand.includes(this.pevStrings[i].details) && this.pevStrings[i].found === false){\r\n                            if(sCommand.includes(this.pevStrings[12].details))//Link Measurement\r\n                            {\r\n                                let measurementValue = sCommand.split(':')\r\n                                if(measurementValue.length>1){\r\n                                    this.pevStrings[12].display = \"Link Measurement: \"+Number(measurementValue[1].trim())+\"ms.\"\r\n                                    this.linkMeasurements.push(measurementValue[1].trim())\r\n\r\n                                    \r\n                                }\r\n                            }\r\n                           \r\n                            this.pevStrings[i].found = true\r\n                            nowFound = true\r\n                            if(i === 13 && this.state.checked === true)// IPv6 Message\r\n                            {\r\n                                setTimeout(()=>{this.pevSendStopCommand()},15000);\r\n                            }else if(i === 0 && this.state.checked === true)// IPv6 Message\r\n                            {\r\n                                setTimeout(()=>{this.pevSendStartCommand()},5000);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(nowFound === true){\r\n                        console.warn(\"OKKKKKKKK\")\r\n\r\n                        this.setState({  \r\n                            printOutCom : this.printOutCom,\r\n                            toggleToRefresh : !this.state.toggleToRefresh,\r\n                            role : this.role  ,\r\n                            checked : this.state.checked  \r\n                        })\r\n                    }\r\n            }\r\n        }\r\n        \r\n\r\n                       \r\n    }\r\n\r\n\r\n\r\n    ProcessRawData(){\r\n        let commandArray = this.rawData.split('*')\r\n        if(commandArray.length>1){\r\n            commandArray.forEach(item=>{\r\n                console.log(\"item : \"+item)\r\n                this.ProcessSplittedCommand(item)\r\n            })\r\n            this.rawData = commandArray[commandArray.length-1]\r\n            console.log(\"this.rawData : \"+this.rawData)\r\n        }\r\n        \r\n    }\r\n\r\n    ReadValues(){\r\n        this.portReader.read().then(res=>{\r\n            console.log(\"VALUE \",res.value)\r\n            this.rawData += new TextDecoder(\"utf-8\").decode(res.value)\r\n            console.log(\"rawData \",this.rawData)\r\n            \r\n            setTimeout(this.ProcessRawData(),0);\r\n            this.ReadValues();\r\n        });\r\n    }\r\n\r\n    \r\n    async OpenReadComPort(){\r\n        console.log(\"OpenReadComPort | begin\")\r\n\r\n        console.log(\"Port..\",this.props.port)\r\n        const p_Port = this.props.port\r\n\r\n        await p_Port.port.open({ baudRate: 115200});\r\n        this.portReader = p_Port.port.readable.getReader();\r\n\r\n        this.portWriter = p_Port.port.writable.getWriter();\r\n        \r\n\r\n        setTimeout(()=>{\r\n            this.ReadValues()\r\n        },0)\r\n\r\n        const data = new Uint8Array([114]); // r\r\n        this.portWriter.write(data).then(res=>{\r\n        });\r\n        console.log(\"ask role\")\r\n        \r\n       \r\n        console.log(\"OpenReadComPort | end\")\r\n    }\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        \r\n        this.theme = responsiveFontSizes(createMuiTheme(\r\n            {typography: {\r\n                h1: {\r\n                    fontSize: 200,\r\n                },\r\n                h2: {\r\n                    fontSize: 15,\r\n                },\r\n            },}\r\n        ));\r\n        this.portReader = {}\r\n        this.portWriter = {}\r\n        this.rawData = \"\"\r\n        this.role = \"\"\r\n        this.state = {\r\n            printOutCom : \"\",\r\n            toggleToRefresh : false,\r\n            role : \"PEV\",\r\n            checked : false\r\n          };\r\n\r\n        this.queryInterval = {}\r\n        this.initializePEVStrings()\r\n        this.pevSendStartCommand = this.pevSendStartCommand.bind(this)\r\n        this.pevSendStopCommand = this.pevSendStopCommand.bind(this)\r\n        this.handleContToggleSwitch = this.handleContToggleSwitch.bind(this)\r\n        this.showDetailedProgress = this.showDetailedProgress.bind(this)\r\n        this.showLinkPanel = this.showLinkPanel.bind(this)\r\n        this.linkMeasurements = []\r\n    }\r\n\r\n  \r\n    showDetailedProgress(){\r\n        if(this.pevStrings != null && this.pevStrings.length > 0)\r\n        {\r\n            \r\n            return this.pevStrings.map((value,index)=>{\r\n                if(value.found)\r\n                {\r\n                    if(value.warning === false){\r\n                        return(\r\n                            <p key={\"detailed_\"+index}>\r\n                                {value.display}.......................................OK\r\n                            </p>\r\n                        );\r\n                    }\r\n                    else{\r\n                        return(\r\n                            <p key={\"detailed_\"+index} style={{color:'#c20b0b'}}>\r\n                                {value.display}\r\n                            </p>\r\n                        );\r\n                    }\r\n                }\r\n            })\r\n              \r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n    showLinkPanel(){\r\n        console.log(\"Show Link Panel\",this.linkMeasurements.length)\r\n        if(this.linkMeasurements != null && this.linkMeasurements.length > 0)\r\n        { \r\n            return(\r\n                <div style={{width:'400px',\r\n                        height:'80px'}}>\r\n                <div className=\"ui panel\">\r\n                    <div className=\"ui panel content\">\r\n                    {\r\n                        this.linkMeasurements.map((value,index)=>{\r\n                            return(\r\n                                <>\r\n                                <strong key={index}>Link Time</strong> {value}<br /> \r\n                                </>\r\n                            );\r\n                        })\r\n                    }       \r\n                    </div>\r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1 className=\"cs\">FoE-Charger</h1>\r\n                    <div className=\"circle cir\"><p className=\"c\">F</p>\r\n                    <div className=\"circle one\"></div>\r\n                    <div className=\"circle two\">\r\n                        <div className=\"circle three\">\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n\r\n                    <div className=\"wrapper\">\r\n                    <div className=\"bar left\"></div>\r\n                    <div className=\"bar top\"></div>\r\n                    <div className=\"bar right\"></div>\r\n                    <div className=\"bar bottom\"></div>\r\n                    <br/><br/><br/>\r\n                    \r\n                    <div className=\"button\">\r\n                        <span className=\"button__text\" onClick={this.pevSendStartCommand}>Start</span>\r\n                    </div>\r\n                    <div className=\"button\">\r\n                        <span className=\"button__text\" onClick={this.pevSendStopCommand}>Stop</span>\r\n                    </div>\r\n                    {this.showDetailedProgress()}                \r\n                    {this.showLinkPanel()}\r\n                    </div>\r\n            </div>\r\n            );\r\n    }\r\n\r\n/*\r\n<ol className=\"timeline\">\r\n                        <li>list item</li>\r\n                        <li>list item</li>\r\n                    </ol>\r\n*/\r\n\r\n}\r\nexport default DeviceState","C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\index.js",[],["32","33"],"C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\components\\Header\\Header.js",[],"C:\\Users\\bc\\Documents\\GitHub\\charger-emulator-interface\\src\\reportWebVitals.js",[],{"ruleId":"34","severity":1,"message":"35","line":1,"column":26,"nodeType":"36","messageId":"37","endLine":1,"endColumn":34},{"ruleId":"34","severity":1,"message":"38","line":3,"column":8,"nodeType":"36","messageId":"37","endLine":3,"endColumn":14},{"ruleId":"34","severity":1,"message":"39","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":19},{"ruleId":"34","severity":1,"message":"40","line":5,"column":8,"nodeType":"36","messageId":"37","endLine":5,"endColumn":24},{"ruleId":"34","severity":1,"message":"41","line":6,"column":8,"nodeType":"36","messageId":"37","endLine":6,"endColumn":14},{"ruleId":"34","severity":1,"message":"42","line":7,"column":8,"nodeType":"36","messageId":"37","endLine":7,"endColumn":12},{"ruleId":"34","severity":1,"message":"43","line":9,"column":8,"nodeType":"36","messageId":"37","endLine":9,"endColumn":15},{"ruleId":"44","severity":1,"message":"45","line":225,"column":53,"nodeType":"46","messageId":"47","endLine":225,"endColumn":55},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'Grid' is defined but never used.","'Tooltip' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-global-assign","no-unsafe-negation"]