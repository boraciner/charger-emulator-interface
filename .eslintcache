[{"D:\\react-workshop\\charger-emulator-interface\\src\\reportWebVitals.js":"1","D:\\react-workshop\\charger-emulator-interface\\src\\App.js":"2","D:\\react-workshop\\charger-emulator-interface\\src\\components\\Header\\Header.js":"3","D:\\react-workshop\\charger-emulator-interface\\src\\index.js":"4","D:\\react-workshop\\charger-emulator-interface\\src\\components\\DeviceState\\DeviceState.js":"5","D:\\react-workshop\\charger-emulator-interface\\src\\components\\CalculatedChart\\CalculatedChart.js":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":3250,"mtime":1607251998572,"results":"9","hashOfConfig":"8"},{"size":1260,"mtime":1607200584973,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"8"},{"size":9276,"mtime":1607204181339,"results":"12","hashOfConfig":"8"},{"size":257,"mtime":1606770737421,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"aj2uyh",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"D:\\react-workshop\\charger-emulator-interface\\src\\reportWebVitals.js",[],["30","31"],"D:\\react-workshop\\charger-emulator-interface\\src\\App.js",[],"D:\\react-workshop\\charger-emulator-interface\\src\\components\\Header\\Header.js",[],"D:\\react-workshop\\charger-emulator-interface\\src\\index.js",[],["32","33"],"D:\\react-workshop\\charger-emulator-interface\\src\\components\\DeviceState\\DeviceState.js",["34","35"],"import React,{Component} from 'react'\r\nimport Timeline from '@material-ui/lab/Timeline';\r\nimport TimelineItem from '@material-ui/lab/TimelineItem';\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\r\nimport TimelineContent from '@material-ui/lab/TimelineContent';\r\nimport TimelineDot from '@material-ui/lab/TimelineDot';\r\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport EvStationIcon from '@material-ui/icons/EvStation';\r\nimport DirectionsCarIcon from '@material-ui/icons/DirectionsCar';\r\nimport lightGreen from \"@material-ui/core/colors/lightGreen\";\r\n\r\n\r\n\r\n\r\n\r\nclass DeviceState extends Component{\r\n    \r\n    \r\n    preparePEVRelatedButtons(){\r\n        return(\r\n          <Grid container \r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            <Grid item xs={6}>\r\n                <ButtonGroup  style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}>\r\n                <Button color=\"primary\" aria-label=\"outlined primary button group\">Start</Button>\r\n                <Button color=\"secondary\" aria-label=\"outlined secondary button group\">Stop</Button>\r\n                </ButtonGroup>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControlLabel style={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'center',\r\n                                        }}\r\n                control={<Switch name=\"checkedA\" />}\r\n                label=\"Auto Run\"\r\n                />\r\n            </Grid>\r\n          </Grid>\r\n        ) \r\n      }\r\n\r\n    prepareTimeLineItem(content,isSecondary = false,myKey){\r\n        return(\r\n            <TimelineItem key={myKey}> \r\n                <TimelineSeparator>\r\n                <TimelineDot color={isSecondary ? \"secondary\" : \"primary\"} />\r\n                <TimelineConnector />\r\n                </TimelineSeparator>\r\n                <TimelineContent>{content}</TimelineContent>\r\n            </TimelineItem>\r\n        )\r\n    }\r\n\r\n    \r\n\r\n    initializePEVStrings(){\r\n        this.pevStrings = [\r\n            {details : \"PLC - PIB image reading completed OK.\",found : false},\r\n            {details : \"CM_SLAC_PARAM.REQ sent\",found : false},\r\n            {details : \"CM_SLAC_PARAM.CNF received\",found : false},\r\n            {details : \"CM_START_ATTEN_CHAR.IND sent\",found : false},\r\n            {details : \"CM_START_ATTEN_CHAR.IND sent\",found : false},\r\n            {details : \"CM_START_ATTEN_CHAR.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",found : false},\r\n            {details : \"CM_ATTEN_CHAR.IND received\",found : false},\r\n            {details : \"CM_ATTEN_CHAR.RSP sent\",found : false},\r\n            {details : \"CM_VALIDATE.REQ sent\",found : false},\r\n            {details : \"CM_SLAC_MATCH.CNF received. -Charger Success-\",found : false},\t\r\n        ]\r\n    }\r\n\r\n    preparePEVTimeLine(){\r\n        return(\r\n            <div>\r\n            <ThemeProvider theme={this.theme}>\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}>\r\n            <DirectionsCarIcon style={{ color: 'green' , fontSize: '60px'} }/>\r\n            </div>\r\n            </ThemeProvider>\r\n            <Timeline align=\"alternate\">\r\n\r\n            {\r\n                this.pevStrings.map((value,key)=>(\r\n                   this.prepareTimeLineItem(value.details,value.found,key)                      \r\n                ))\r\n            }\r\n\r\n              \r\n            </Timeline>\r\n            </div>\r\n            )\r\n    }\r\n    prepareEVSETimeLine(){\r\n        return(\r\n            <div>\r\n            <ThemeProvider theme={this.theme}>\r\n            <EvStationIcon/>\r\n            </ThemeProvider>\r\n            </div>\r\n            )\r\n    }\r\n\r\n  \r\n    componentDidMount(){\r\n        this.OpenReadComPort();\r\n    }\r\n\r\n    ProcessSplittedCommand(sCommand){\r\n\r\n        switch(sCommand)\r\n        {\r\n            case \"ROLE:PEV\":\r\n                this.role = \"PEV\";\r\n                clearInterval(this.queryInterval);\r\n                this.setState({  printOutCom : this.printOutCom,\r\n                                    toggleToRefresh : this.toggleToRefresh,\r\n                                    role : this.role  \r\n                                })\r\n\r\n                \r\n\r\n                break;\r\n            case \"ROLE:EVSE\":\r\n                this.role = \"EVSE\";\r\n                clearInterval(this.queryInterval);\r\n                this.setState({  printOutCom : this.printOutCom,\r\n                                    toggleToRefresh : this.toggleToRefresh,\r\n                                    role : this.role  })\r\n                break;\r\n            default:\r\n                let nowFound = false;\r\n                for(let i=0;i<this.pevStrings.length;i++){\r\n                    console.log(\"Compare \",sCommand, \" with \",this.pevStrings[i].details)\r\n                    if(sCommand.includes(this.pevStrings[i].details) && this.pevStrings[i].found === false){\r\n                        this.pevStrings[i].found = true\r\n                        nowFound = true\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if(nowFound === true){\r\n                    console.warn(\"OKKKKKKKK\")\r\n\r\n                    this.setState({  \r\n                        printOutCom : this.printOutCom,\r\n                        toggleToRefresh : true,\r\n                        role : this.role  \r\n                    })\r\n\r\n                }\r\n\r\n                       \r\n        }\r\n    }\r\n\r\n\r\n\r\n    ProcessRawData(){\r\n        let commandArray = this.rawData.split('*')\r\n        if(commandArray.length>1){\r\n            commandArray.forEach(item=>{\r\n                console.log(\"item : \"+item)\r\n                this.ProcessSplittedCommand(item)\r\n            })\r\n            this.rawData = commandArray[commandArray.length-1]\r\n            console.log(\"this.rawData : \"+this.rawData)\r\n        }\r\n        \r\n    }\r\n\r\n    ReadValues(){\r\n        this.portReader.read().then(res=>{\r\n            console.log(\"VALUE \",res.value)\r\n            this.rawData += new TextDecoder(\"utf-8\").decode(res.value)\r\n            console.log(\"rawData \",this.rawData)\r\n            \r\n            setTimeout(this.ProcessRawData(),0);\r\n            this.ReadValues();\r\n        });\r\n    }\r\n\r\n    \r\n    async OpenReadComPort(){\r\n        console.log(\"OpenReadComPort | begin\")\r\n\r\n        console.log(\"Port..\",this.props.port)\r\n        const p_Port = this.props.port\r\n\r\n        await p_Port.port.open({ baudRate: 9600});\r\n        this.portReader = p_Port.port.readable.getReader();\r\n\r\n        this.portWriter = p_Port.port.writable.getWriter();\r\n        \r\n\r\n        setTimeout(()=>{\r\n            this.ReadValues()\r\n        },0)\r\n\r\n        this.queryInterval = setInterval(()=>{\r\n            const data = new Uint8Array([114]); // r\r\n            this.portWriter.write(data).then(res=>{\r\n            });\r\n            \r\n        },100)\r\n        console.log(\"OpenReadComPort | end\")\r\n    }\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        \r\n        this.theme = responsiveFontSizes(createMuiTheme());\r\n        this.portReader = {}\r\n        this.portWriter = {}\r\n        this.rawData = \"\"\r\n        this.role = \"\"\r\n        this.state = {\r\n            printOutCom : \"\",\r\n            toggleToRefresh : false,\r\n            role : \"\"\r\n          };\r\n\r\n        this.queryInterval = {}\r\n        this.initializePEVStrings()\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n\r\n                <div>\r\n                    {this.state.role === \"PEV\" ? this.preparePEVRelatedButtons() : null }\r\n                </div>\r\n                {\r\n                    this.state.role === \"PEV\" ?\r\n                    this.preparePEVTimeLine() : \r\n                        this.state.role === \"EVSE\" ? \r\n                        this.prepareEVSETimeLine() : null  \r\n                }\r\n                \r\n                <h3>{this.state.printOutCom}</h3>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nexport default DeviceState","D:\\react-workshop\\charger-emulator-interface\\src\\components\\CalculatedChart\\CalculatedChart.js",[],["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":9,"column":8,"nodeType":"46","messageId":"47","endLine":9,"endColumn":18},{"ruleId":"44","severity":1,"message":"48","line":17,"column":8,"nodeType":"46","messageId":"47","endLine":17,"endColumn":18},{"ruleId":"38","replacedBy":"49"},{"ruleId":"40","replacedBy":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],["51"],["52"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'lightGreen' is defined but never used.",["51"],["52"],"no-global-assign","no-unsafe-negation"]